/*
visibility_polygon.js version 1.7

This code is released into the public domain - attribution is appreciated but not required.
Made by Byron Knoll.

https://github.com/byronknoll/visibility-polygon-js
*/

function VisibilityPolygon(){}
VisibilityPolygon.compute=function(d,c){for(var e=[],g=VisibilityPolygon.sortPoints(d,c),f=Array(c.length),h=0;h<f.length;++h)f[h]=-1;for(var k=[],l=[d[0]+1,d[1]],h=0;h<c.length;++h){var m=VisibilityPolygon.angle(c[h][0],d),n=VisibilityPolygon.angle(c[h][1],d),p=!1;-180<m&&0>=m&&180>=n&&0<=n&&180<n-m&&(p=!0);-180<n&&0>=n&&180>=m&&0<=m&&180<m-n&&(p=!0);p&&VisibilityPolygon.insert(h,k,d,c,l,f)}for(h=0;h<g.length;){var n=m=!1,p=h,l=c[g[h][0]][g[h][1]],q=k[0];do if(-1!=f[g[h][0]]?(g[h][0]==q&&(m=!0,l=
c[g[h][0]][g[h][1]]),VisibilityPolygon.remove(f[g[h][0]],k,d,c,l,f)):(VisibilityPolygon.insert(g[h][0],k,d,c,l,f),k[0]!=q&&(n=!0)),++h,h==g.length)break;while(g[h][2]<g[p][2]+VisibilityPolygon.epsilon());m?(e.push(l),m=VisibilityPolygon.intersectLines(c[k[0]][0],c[k[0]][1],d,l),VisibilityPolygon.equal(m,l)||e.push(m)):n&&(e.push(VisibilityPolygon.intersectLines(c[q][0],c[q][1],d,l)),e.push(VisibilityPolygon.intersectLines(c[k[0]][0],c[k[0]][1],d,l)))}return e};
VisibilityPolygon.computeViewport=function(d,c,e,g){for(var f=[],h=[[e[0],e[1]],[g[0],e[1]],[g[0],g[1]],[e[0],g[1]]],k=0;k<c.length;++k){for(var l=[],m=0;m<h.length;++m){var n=m+1;n==h.length&&(n=0);VisibilityPolygon.doLineSegmentsIntersect(c[k][0][0],c[k][0][1],c[k][1][0],c[k][1][1],h[m][0],h[m][1],h[n][0],h[n][1])&&(n=VisibilityPolygon.intersectLines(c[k][0],c[k][1],h[m],h[n]),2==n.length&&(VisibilityPolygon.equal(n,c[k][0])||VisibilityPolygon.equal(n,c[k][1])||l.push(n)))}for(n=[c[k][0][0],c[k][0][1]];0<
l.length;){for(var p=0,q=VisibilityPolygon.distance(n,l[0]),m=1;m<l.length;++m){var r=VisibilityPolygon.distance(n,l[m]);r<q&&(q=r,p=m)}f.push([[n[0],n[1]],[l[p][0],l[p][1]]]);n[0]=l[p][0];n[1]=l[p][1];l.splice(p,1)}f.push([n,[c[k][1][0],c[k][1][1]]])}c=[];for(k=0;k<f.length;++k)VisibilityPolygon.inViewport(f[k][0],e,g)&&VisibilityPolygon.inViewport(f[k][1],e,g)&&c.push([[f[k][0][0],f[k][0][1]],[f[k][1][0],f[k][1][1]]]);f=10*VisibilityPolygon.epsilon();c.push([[e[0]-f,e[1]-f],[g[0]+f,e[1]-f]]);c.push([[g[0]+
f,e[1]-f],[g[0]+f,g[1]+f]]);c.push([[g[0]+f,g[1]+f],[e[0]-f,g[1]+f]]);c.push([[e[0]-f,g[1]+f],[e[0]-f,e[1]-f]]);return VisibilityPolygon.compute(d,c)};VisibilityPolygon.inViewport=function(d,c,e){return d[0]<c[0]-VisibilityPolygon.epsilon()||d[1]<c[1]-VisibilityPolygon.epsilon()||d[0]>e[0]+VisibilityPolygon.epsilon()||d[1]>e[1]+VisibilityPolygon.epsilon()?!1:!0};
VisibilityPolygon.inPolygon=function(d,c){for(var e=0,g=0;g<c.length;++g)e=Math.min(c[g][0],e),e=Math.min(c[g][1],e);for(var e=[e-1,e-1],f=0,g=0;g<c.length;++g){var h=g+1;h==c.length&&(h=0);if(VisibilityPolygon.doLineSegmentsIntersect(e[0],e[1],d[0],d[1],c[g][0],c[g][1],c[h][0],c[h][1])){var k=VisibilityPolygon.intersectLines(e,d,c[g],c[h]);if(VisibilityPolygon.equal(d,k))return!0;VisibilityPolygon.equal(k,c[g])?180>VisibilityPolygon.angle2(d,e,c[h])&&++f:VisibilityPolygon.equal(k,c[h])?180>VisibilityPolygon.angle2(d,
e,c[g])&&++f:++f}}return 0!=f%2};VisibilityPolygon.convertToSegments=function(d){for(var c=[],e=0;e<d.length;++e)for(var g=0;g<d[e].length;++g){var f=g+1;f==d[e].length&&(f=0);c.push([[d[e][g][0],d[e][g][1]],[d[e][f][0],d[e][f][1]]])}return c};
VisibilityPolygon.breakIntersections=function(d){for(var c=[],e=0;e<d.length;++e){for(var g=[],f=0;f<d.length;++f)if(e!=f&&VisibilityPolygon.doLineSegmentsIntersect(d[e][0][0],d[e][0][1],d[e][1][0],d[e][1][1],d[f][0][0],d[f][0][1],d[f][1][0],d[f][1][1])){var h=VisibilityPolygon.intersectLines(d[e][0],d[e][1],d[f][0],d[f][1]);2==h.length&&(VisibilityPolygon.equal(h,d[e][0])||VisibilityPolygon.equal(h,d[e][1])||g.push(h))}for(h=[d[e][0][0],d[e][0][1]];0<g.length;){for(var k=0,l=VisibilityPolygon.distance(h,
g[0]),f=1;f<g.length;++f){var m=VisibilityPolygon.distance(h,g[f]);m<l&&(l=m,k=f)}c.push([[h[0],h[1]],[g[k][0],g[k][1]]]);h[0]=g[k][0];h[1]=g[k][1];g.splice(k,1)}c.push([h,[d[e][1][0],d[e][1][1]]])}return c};VisibilityPolygon.epsilon=function(){return 1E-7};VisibilityPolygon.equal=function(d,c){return Math.abs(d[0]-c[0])<VisibilityPolygon.epsilon()&&Math.abs(d[1]-c[1])<VisibilityPolygon.epsilon()?!0:!1};
VisibilityPolygon.remove=function(d,c,e,g,f,h){h[c[d]]=-1;if(d==c.length-1)c.pop();else{c[d]=c.pop();h[c[d]]=d;var k=VisibilityPolygon.parent(d);if(0!=d&&VisibilityPolygon.lessThan(c[d],c[k],e,g,f))for(;0<d;){k=VisibilityPolygon.parent(d);if(!VisibilityPolygon.lessThan(c[d],c[k],e,g,f))break;h[c[k]]=d;h[c[d]]=k;var l=c[d];c[d]=c[k];c[k]=l;d=k}else for(;;){var k=VisibilityPolygon.child(d),m=k+1;if(k<c.length&&VisibilityPolygon.lessThan(c[k],c[d],e,g,f)&&(m==c.length||VisibilityPolygon.lessThan(c[k],
c[m],e,g,f)))h[c[k]]=d,h[c[d]]=k,l=c[k],c[k]=c[d],c[d]=l,d=k;else if(m<c.length&&VisibilityPolygon.lessThan(c[m],c[d],e,g,f))h[c[m]]=d,h[c[d]]=m,l=c[m],c[m]=c[d],c[d]=l,d=m;else break}}};VisibilityPolygon.insert=function(d,c,e,g,f,h){if(0!=VisibilityPolygon.intersectLines(g[d][0],g[d][1],e,f).length){var k=c.length;c.push(d);for(h[d]=k;0<k;){d=VisibilityPolygon.parent(k);if(!VisibilityPolygon.lessThan(c[k],c[d],e,g,f))break;h[c[d]]=k;h[c[k]]=d;var l=c[k];c[k]=c[d];c[d]=l;k=d}}};
VisibilityPolygon.lessThan=function(d,c,e,g,f){var h=VisibilityPolygon.intersectLines(g[d][0],g[d][1],e,f);f=VisibilityPolygon.intersectLines(g[c][0],g[c][1],e,f);if(!VisibilityPolygon.equal(h,f))return c=VisibilityPolygon.distance(h,e),e=VisibilityPolygon.distance(f,e),c<e;var k=0;VisibilityPolygon.equal(h,g[d][0])&&(k=1);var l=0;VisibilityPolygon.equal(f,g[c][0])&&(l=1);d=VisibilityPolygon.angle2(g[d][k],h,e);e=VisibilityPolygon.angle2(g[c][l],f,e);return 180>d?180<e?!0:e<d:d<e};
VisibilityPolygon.parent=function(d){return Math.floor((d-1)/2)};VisibilityPolygon.child=function(d){return 2*d+1};VisibilityPolygon.angle2=function(d,c,e){d=VisibilityPolygon.angle(d,c);c=VisibilityPolygon.angle(c,e);c=d-c;0>c&&(c+=360);360<c&&(c-=360);return c};VisibilityPolygon.sortPoints=function(d,c){for(var e=Array(2*c.length),g=0;g<c.length;++g)for(var f=0;2>f;++f){var h=VisibilityPolygon.angle(c[g][f],d);e[2*g+f]=[g,f,h]}e.sort(function(c,d){return c[2]-d[2]});return e};
VisibilityPolygon.angle=function(d,c){return 180*Math.atan2(c[1]-d[1],c[0]-d[0])/Math.PI};VisibilityPolygon.intersectLines=function(d,c,e,g){var f=(g[0]-e[0])*(d[1]-e[1])-(g[1]-e[1])*(d[0]-e[0]);e=(g[1]-e[1])*(c[0]-d[0])-(g[0]-e[0])*(c[1]-d[1]);return 0!=e?(f/=e,[d[0]-f*(d[0]-c[0]),d[1]-f*(d[1]-c[1])]):[]};VisibilityPolygon.distance=function(d,c){return(d[0]-c[0])*(d[0]-c[0])+(d[1]-c[1])*(d[1]-c[1])};
VisibilityPolygon.isOnSegment=function(d,c,e,g,f,h){return(d<=f||e<=f)&&(f<=d||f<=e)&&(c<=h||g<=h)&&(h<=c||h<=g)};VisibilityPolygon.computeDirection=function(d,c,e,g,f,h){a=(f-d)*(g-c);b=(e-d)*(h-c);return a<b?-1:a>b?1:0};
VisibilityPolygon.doLineSegmentsIntersect=function(d,c,e,g,f,h,k,l){d1=VisibilityPolygon.computeDirection(f,h,k,l,d,c);d2=VisibilityPolygon.computeDirection(f,h,k,l,e,g);d3=VisibilityPolygon.computeDirection(d,c,e,g,f,h);d4=VisibilityPolygon.computeDirection(d,c,e,g,k,l);return(0<d1&&0>d2||0>d1&&0<d2)&&(0<d3&&0>d4||0>d3&&0<d4)||0==d1&&VisibilityPolygon.isOnSegment(f,h,k,l,d,c)||0==d2&&VisibilityPolygon.isOnSegment(f,h,k,l,e,g)||0==d3&&VisibilityPolygon.isOnSegment(d,c,e,g,f,h)||0==d4&&VisibilityPolygon.isOnSegment(d,
c,e,g,k,l)};
